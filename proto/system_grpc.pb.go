// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/system.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SystemInfoService_Register_FullMethodName            = "/system.SystemInfoService/Register"
	SystemInfoService_SendSystemInfo_FullMethodName      = "/system.SystemInfoService/SendSystemInfo"
	SystemInfoService_ReceiveCommands_FullMethodName     = "/system.SystemInfoService/ReceiveCommands"
	SystemInfoService_ReportCommandResult_FullMethodName = "/system.SystemInfoService/ReportCommandResult"
)

// SystemInfoServiceClient is the client API for SystemInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SystemInfo服务定义
type SystemInfoServiceClient interface {
	// 客户端注册到服务端
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// 客户端发送系统信息到服务端
	SendSystemInfo(ctx context.Context, in *SystemInfoRequest, opts ...grpc.CallOption) (*SystemInfoResponse, error)
	// 服务端向客户端发送命令
	ReceiveCommands(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Command], error)
	// 客户端向服务端报告命令执行结果
	ReportCommandResult(ctx context.Context, in *CommandResult, opts ...grpc.CallOption) (*CommandResultResponse, error)
}

type systemInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemInfoServiceClient(cc grpc.ClientConnInterface) SystemInfoServiceClient {
	return &systemInfoServiceClient{cc}
}

func (c *systemInfoServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, SystemInfoService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemInfoServiceClient) SendSystemInfo(ctx context.Context, in *SystemInfoRequest, opts ...grpc.CallOption) (*SystemInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemInfoResponse)
	err := c.cc.Invoke(ctx, SystemInfoService_SendSystemInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemInfoServiceClient) ReceiveCommands(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Command], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SystemInfoService_ServiceDesc.Streams[0], SystemInfoService_ReceiveCommands_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CommandRequest, Command]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SystemInfoService_ReceiveCommandsClient = grpc.ServerStreamingClient[Command]

func (c *systemInfoServiceClient) ReportCommandResult(ctx context.Context, in *CommandResult, opts ...grpc.CallOption) (*CommandResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResultResponse)
	err := c.cc.Invoke(ctx, SystemInfoService_ReportCommandResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemInfoServiceServer is the server API for SystemInfoService service.
// All implementations must embed UnimplementedSystemInfoServiceServer
// for forward compatibility.
//
// SystemInfo服务定义
type SystemInfoServiceServer interface {
	// 客户端注册到服务端
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// 客户端发送系统信息到服务端
	SendSystemInfo(context.Context, *SystemInfoRequest) (*SystemInfoResponse, error)
	// 服务端向客户端发送命令
	ReceiveCommands(*CommandRequest, grpc.ServerStreamingServer[Command]) error
	// 客户端向服务端报告命令执行结果
	ReportCommandResult(context.Context, *CommandResult) (*CommandResultResponse, error)
	mustEmbedUnimplementedSystemInfoServiceServer()
}

// UnimplementedSystemInfoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSystemInfoServiceServer struct{}

func (UnimplementedSystemInfoServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedSystemInfoServiceServer) SendSystemInfo(context.Context, *SystemInfoRequest) (*SystemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSystemInfo not implemented")
}
func (UnimplementedSystemInfoServiceServer) ReceiveCommands(*CommandRequest, grpc.ServerStreamingServer[Command]) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveCommands not implemented")
}
func (UnimplementedSystemInfoServiceServer) ReportCommandResult(context.Context, *CommandResult) (*CommandResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCommandResult not implemented")
}
func (UnimplementedSystemInfoServiceServer) mustEmbedUnimplementedSystemInfoServiceServer() {}
func (UnimplementedSystemInfoServiceServer) testEmbeddedByValue()                           {}

// UnsafeSystemInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemInfoServiceServer will
// result in compilation errors.
type UnsafeSystemInfoServiceServer interface {
	mustEmbedUnimplementedSystemInfoServiceServer()
}

func RegisterSystemInfoServiceServer(s grpc.ServiceRegistrar, srv SystemInfoServiceServer) {
	// If the following call pancis, it indicates UnimplementedSystemInfoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SystemInfoService_ServiceDesc, srv)
}

func _SystemInfoService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemInfoServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemInfoService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemInfoServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemInfoService_SendSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemInfoServiceServer).SendSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemInfoService_SendSystemInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemInfoServiceServer).SendSystemInfo(ctx, req.(*SystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemInfoService_ReceiveCommands_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SystemInfoServiceServer).ReceiveCommands(m, &grpc.GenericServerStream[CommandRequest, Command]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SystemInfoService_ReceiveCommandsServer = grpc.ServerStreamingServer[Command]

func _SystemInfoService_ReportCommandResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemInfoServiceServer).ReportCommandResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemInfoService_ReportCommandResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemInfoServiceServer).ReportCommandResult(ctx, req.(*CommandResult))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemInfoService_ServiceDesc is the grpc.ServiceDesc for SystemInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "system.SystemInfoService",
	HandlerType: (*SystemInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _SystemInfoService_Register_Handler,
		},
		{
			MethodName: "SendSystemInfo",
			Handler:    _SystemInfoService_SendSystemInfo_Handler,
		},
		{
			MethodName: "ReportCommandResult",
			Handler:    _SystemInfoService_ReportCommandResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveCommands",
			Handler:       _SystemInfoService_ReceiveCommands_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/system.proto",
}
